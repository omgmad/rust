// contracts/cw20_capped/src/lib.rs
use cosmwasm_std::{entry_point, to_binary, Binary, DepsMut, Env, MessageInfo, Response, StdResult};
use cw20_base::{contract::{instantiate as base_instantiate, execute as base_execute, query as base_query}, msg::InstantiateMsg};
use cw20_capped::msg::InstantiateMsg as CapInstantiateMsg;

// Note: This template assumes you created a cw20_capped module (or modify cw20-base to include cap).
// For brevity we call base_instantiate and then set cap in state (implementation details omitted).
#[entry_point]
pub fn instantiate(deps: DepsMut, env: Env, info: MessageInfo, msg: CapInstantiateMsg) -> StdResult<Response> {
    let base = InstantiateMsg {
        name: msg.name,
        symbol: msg.symbol,
        decimals: msg.decimals,
        initial_balances: msg.initial_balances,
        mint: msg.mint,
        marketing: msg.marketing,
    };
    base_instantiate(deps, env, info, base)
}

#[entry_point]
pub fn execute(deps: DepsMut, env: Env, info: MessageInfo, msg: cw20::Cw20ExecuteMsg) -> StdResult<Response> {
    base_execute(deps, env, info, msg)
}

#[entry_point]
pub fn query(deps: cosmwasm_std::Deps, env: Env, msg: cw20::Cw20QueryMsg) -> StdResult<Binary> {
    base_query(deps, env, msg)
}
